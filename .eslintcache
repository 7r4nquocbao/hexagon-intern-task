[{"D:\\VSCProjects\\hexagon-intern-task\\src\\App.js":"1","D:\\VSCProjects\\hexagon-intern-task\\src\\LineChart.jsx":"2","D:\\VSCProjects\\hexagon-intern-task\\src\\index.js":"3"},{"size":10169,"mtime":1611239182209,"results":"4","hashOfConfig":"5"},{"size":10278,"mtime":1611235977015,"results":"6","hashOfConfig":"5"},{"size":218,"mtime":1610809013329,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13ohrpo",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\VSCProjects\\hexagon-intern-task\\src\\App.js",["15","16","17","18","19","20"],"D:\\VSCProjects\\hexagon-intern-task\\src\\LineChart.jsx",["21"],"import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction LineChart(props) {\r\n\r\n    const {labels, datas, colors, ticks} = props;\r\n\r\n    const hexToRgba = (hex, opacity) => {\r\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n          return r + r + g + g + b + b;\r\n        });\r\n      \r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        if(result) {\r\n            const r = parseInt(result[1], 16);\r\n            const g = parseInt(result[2], 16);\r\n            const b = parseInt(result[3], 16);\r\n            return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n        } else {\r\n            return null;\r\n        } \r\n    }  \r\n\r\n    const convertDatasets = () => {\r\n        let datasets = [];\r\n        datas.map((element, index) => {\r\n            const dsObject = {\r\n                label: `Quỹ ${String.fromCharCode(index + 65)}`,\r\n                data: element,\r\n                fill: false,\r\n                borderColor: colors[index % colors.length],\r\n                borderWidth: 2,\r\n                pointBackgroundColor: colors[index % colors.length],\r\n                pointHoverBorderColor: hexToRgba(colors[index % colors.length], 0.2),\r\n                pointHoverBorderWidth: 15,\r\n                lineTension: 0,\r\n            }\r\n            datasets.push(dsObject);\r\n        })\r\n        return datasets;\r\n    }\r\n\r\n    const generateLegend = () => {\r\n        return datas.map((element, index) => {\r\n            return (\r\n                <div className=\"legend-item\">\r\n                    <div className=\"legend-rectangle\" \r\n                    style={{backgroundColor: hexToRgba(colors[index % colors.length], 1)}}></div>\r\n                    <label>{`Quỹ ${String.fromCharCode(index + 65)}`}</label>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-box\">\r\n            <div className={`chart-legend justify-content-end ${ticks >= 3 ? 'show' : 'hidden'}`}>\r\n                {generateLegend()}\r\n            </div>\r\n\r\n            <div style={{width: '100%', height: '367px', margin: 0}}>\r\n                <Line\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        tooltips: {\r\n                            // mode: 'point',\r\n                            // intersect: false,\r\n                            // caretSize: 0,\r\n                            // xPadding: 10,\r\n                            // yPadding: 15,\r\n                            // backgroundColor: \"#FFF\",\r\n                            // borderColor: colors[0],\r\n                            // borderWidth: 1,\r\n                            // titleFontColor: \"#000\",\r\n                            // titleAlign: 'center',\r\n                            // bodyFontColor: \"#000\",\r\n                            // bodyAlign: \"center\",\r\n                            // displayColors: false,\r\n                            // titleFontFamily: 'Montserrat',\r\n                            // titleFontStyle: 'normal',\r\n                            // titleFontSize: 14,\r\n                            // bodyFontFamily: 'Montserrat',\r\n                            // bodyFontStyle: 'normal',\r\n                            // bodyFontSize: 14,\r\n                            // titleMarginBottom: 15,\r\n                            // callbacks: {\r\n                            //     label: (tooltipItem, data) => {\r\n                            //         return `Giá trị quỹ: ${tooltipItem.yLabel}`;\r\n                            //     },\r\n                            //     title: (item, data) => {\r\n                            //         return `Ngày: ${item[0].label}`;\r\n                            //     }\r\n                            // }\r\n\r\n                            enabled: false,\r\n                            custom: function(tooltipModel) {\r\n                                // Tooltip Element\r\n                                var tooltipEl = document.getElementById('chartjs-tooltip');\r\n\r\n                                // Create element on first render\r\n                                if (!tooltipEl) {\r\n                                    tooltipEl = document.createElement('div');\r\n                                    tooltipEl.id = 'chartjs-tooltip';\r\n                                    tooltipEl.innerHTML = '<table></table>';\r\n                                    document.body.appendChild(tooltipEl);\r\n                                }\r\n\r\n                                // Hide if no tooltip\r\n                                if (tooltipModel.opacity === 0) {\r\n                                    tooltipEl.style.opacity = 0;\r\n                                    return;\r\n                                }\r\n\r\n                                // Set caret Position\r\n                                tooltipEl.classList.remove('above', 'below', 'no-transform');\r\n                                if (tooltipModel.yAlign) {\r\n                                    tooltipEl.classList.add(tooltipModel.yAlign);\r\n                                } else {\r\n                                    tooltipEl.classList.add('no-transform');\r\n                                }\r\n\r\n                                function getBody(bodyItem) {\r\n                                    return bodyItem.lines;\r\n                                }\r\n\r\n                                // Set Text\r\n                                if (tooltipModel.body) {\r\n                                    var titleLines = tooltipModel.title || [];\r\n                                    var bodyLines = tooltipModel.body.map(getBody);\r\n\r\n                                    const borderColor = tooltipModel.labelColors.map(item => item.backgroundColor);\r\n\r\n                                    tooltipEl.style.border = `2px solid ${borderColor[0]}`;\r\n\r\n                                    var innerHtml = '<thead>';\r\n\r\n                                    titleLines.forEach(function(title) {\r\n                                        innerHtml += `<tr><th class=\"tooltil-css tooltip-title\">Ngày: ${title}</th></tr>`;\r\n                                    });\r\n                                    innerHtml += '</thead><tbody>';\r\n\r\n                                    bodyLines.forEach(function(body, i) {\r\n                                        const content = `Giá trị ${body.toString().replace('Q', 'q')}`;\r\n                                        innerHtml += `<tr><td class=\"tooltil-css tooltip-content\">${content}</td></tr>`;\r\n                                    });\r\n                                    innerHtml += '</tbody>';\r\n\r\n                                    var tableRoot = tooltipEl.querySelector('table');\r\n                                    tableRoot.innerHTML = innerHtml;\r\n                                }\r\n\r\n                                // `this` will be the overall tooltip\r\n                                var position = this._chart.canvas.getBoundingClientRect();\r\n\r\n                                // Display, position, and set styles for font\r\n                                const tooltipElOffset = 10;\r\n                                tooltipEl.style.minHeight = '60px';\r\n                                tooltipEl.style.minWidth = '166px';\r\n                                \r\n                                tooltipEl.style.opacity = 1;\r\n                                tooltipEl.style.position = 'absolute';\r\n                                tooltipEl.style.right = position.right + window.pageXOffset - tooltipModel.caretX + tooltipElOffset + 'px';\r\n                                tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY - parseInt(tooltipEl.style.minHeight) - tooltipElOffset + 'px';\r\n                                tooltipEl.style.pointerEvents = 'none';\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            xAxes: [{\r\n                                display: true,\r\n                                ticks: {\r\n                                    fontSize: 16,\r\n                                    fontColor: 'black',\r\n                                    fontFamily: 'Montserrat',\r\n                                    padding: 15,\r\n                                    maxTicksLimit: ticks,\r\n                                    maxRotation: 0,\r\n                                    callback: (value, index, values) => {\r\n                                        const date = new Date(value);\r\n                                        return `${date.getMonth() + 1}/${date.getDate()}`;\r\n                                    }\r\n                                },\r\n                                // type: 'time',\r\n                                // time: {\r\n                                //     displayFormats: \"DD/MM/YYYY\",\r\n                                // }\r\n                            }],\r\n                            yAxes: [{\r\n                                display: true,\r\n                                ticks: {\r\n                                    fontSize: 16,\r\n                                    fontColor: 'black',\r\n                                    fontFamily: 'Montserrat',\r\n                                    beginAtZero: false,\r\n                                    padding: 15,\r\n                                    stepSize: 0.02\r\n                                }\r\n                            }]\r\n                        },\r\n                        legend: {\r\n                            display: false,\r\n                            align: 'end',\r\n                        },\r\n                        \r\n                    }}\r\n                    data={{\r\n                        labels: labels,\r\n                        datasets: convertDatasets()\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className={`chart-legend justify-content-start ${ticks < 3 ? 'show' : 'hidden'}`}>\r\n                {generateLegend()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineChart;","D:\\VSCProjects\\hexagon-intern-task\\src\\index.js",[],{"ruleId":"22","severity":1,"message":"23","line":9,"column":20,"nodeType":"24","messageId":"25","endLine":9,"endColumn":31},{"ruleId":"26","severity":1,"message":"27","line":27,"column":6,"nodeType":"28","endLine":27,"endColumn":8,"suggestions":"29"},{"ruleId":"26","severity":1,"message":"30","line":36,"column":6,"nodeType":"28","endLine":36,"endColumn":20,"suggestions":"31"},{"ruleId":"22","severity":1,"message":"32","line":54,"column":9,"nodeType":"24","messageId":"25","endLine":54,"endColumn":18},{"ruleId":"33","severity":1,"message":"34","line":113,"column":20,"nodeType":"35","messageId":"36","endLine":113,"endColumn":22},{"ruleId":"33","severity":1,"message":"34","line":127,"column":23,"nodeType":"35","messageId":"36","endLine":127,"endColumn":25},{"ruleId":"33","severity":1,"message":"34","line":28,"column":36,"nodeType":"35","messageId":"36","endLine":28,"endColumn":38},"no-unused-vars","'setDatasets' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'datasets' and 'rows'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDatas' needs the current value of 'rows'.","ArrayExpression",["37"],"React Hook useEffect has missing dependencies: 'addData' and 'intervalId'. Either include them or remove the dependency array.",["38"],"'hexToRgba' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"39","fix":"40"},{"desc":"41","fix":"42"},"Update the dependencies array to be: [datasets, rows]",{"range":"43","text":"44"},"Update the dependencies array to be: [addData, intervalData, intervalId]",{"range":"45","text":"46"},[807,809],"[datasets, rows]",[1001,1015],"[addData, intervalData, intervalId]"]